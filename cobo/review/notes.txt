Hand Sanitizers (Yat Long Chan + Diana Akhmedova + David Chen)
APCS pd8
L06: Read/Review/Expand
2022-02-11f
time spent: 1.0 hrs

================Activity 1================
1a. public static double sentimentVal( String word )
1b. Yes it does require a parameter of type String. If you pass
    an argument of different type, it will result in a compile-time 
    error
1c. Yes, the method returns a double. 

2. 
    abandoned : -0.09
    ability : -0.03
    account : 0.64
    Pog : 0.0

3a. Would compile because the parameter type is correct and the return types match
3b. Would not compile because the parameter type is not correct and varType is different from return type
3c. Would not compile because the method only takes 1 parameter, but two is provided

================End Activity 1============

================Activity 2================
4) totalSentiment() iterates through a string until there are no more spaces left.
   Each iteration, the sentiment of the first word is added to total sentiment and then that word is removed from the string.

5a) The ratings make sense. Reviews with more possitive words have higher ratings.
5b) Maybe add points for punctuation or captials.

6a) The student wrote his code so that any sentiment < 15 will return a 4 as that is the first boolean statement checked.
    He also made it so that anything > 15 returns a 0, which I assume isn't supposed to happen.
6b) He can fix this by fliping the conditionals around. Starting from if (totalSentiment < 0) down to if (totalSentiment < 15)
================End Activity 2============


================Activity 3================
3. The indexOf method finds the first occurence of a given string.
    The substring method returns a part of the string when given a starting index and an optional end index
    It is necessary to add 1 to the position because the substring begins at the given starting index

5. Static methods belong to a class as a whole and not just one instance. 
   They can be called without having a separate instance. 
   Non-static methods belong to instances and must be called from an instance of a class.

6. We can use the randomNegativeAdj or randomPositiveAdj methods to create an intentionally biased review.
================End Activity 3============

================Activity 4================
1. Review bombing
2. Boosting reputation
3. Add more adjectives. Use biased adjectives.
    String review;
    while ("*" in review) {
      String left = review.substring(0, review.indexOf("*"));
      String right = review.substring(review.indexOf(" ", review.indexOf("*")));
      review = left + randomNegativeAdj + " and " + randomNegativeAdj + right;
    }    

5. OneWord has the value of everything in one word but the first character.
6. * isn't part of the word and therefore will interfere with getting the word's sentiment.
7. Add more adjectives.
================End Activity 4============

================Activity 5================
1. We chose to implement a Caesar Shift because it fills all the requirements and is interesting.

2. We first went over how a caesar shift works and then wrote down a few examples. Then, we implemented the algorithm for an all lowercase string. 
   After that, we accounted for punctuation and numbers. Finally, we accounted for capital letters.

3. public static String shift(String s, int key) 
   We chose a String as a param because caesar shifts encrypt sentences. We also have an int that dictates how much each letter is shifted.
   The method is static because it doesn't require any variable or method that would require an instance to be created.

4. char[] charArray = new char[s.length()]; The length() method returns the length of the String.
   charArray[i] = s.charAt(i); The charAt() method returns the substring at an index to a char and returns it.

5. if (c >= 'a' && c <= 'z') EQUIVALENT CODE : if (c > '`' && c < '{')

6.  for (int i = 0; i < s.length(); i ++) {
            charArray[i] = s.charAt(i);
        }

    The loop iterates until it has reached the end of the string. During each iteration it places the character at i in an equivalent index of an array.

    EQUIVALENT CODE:
    int i = 0;
    while (i < s.length()) {
        charArray[i] = s.charAt(i);
        i++;
    }

================End Activity 5============


